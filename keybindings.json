[
  //the default shortcuts for lsp are, gd go to definition, gh hover show simple method signture.
  {
    "key": "space f f",
    "command": "workbench.action.quickOpen",
    "when": "vim.mode=='Normal' && editorTextFocus && !terminalFocus"
  },
  {
    "key": "space e",
    "command": "workbench.action.toggleSidebarVisibility",
    "when": "(vim.mode=='Normal'  && !terminalFocus && editorTextFocus) || filesExplorerFocus"
  },
  {
    "key": "space f w",
    "command": "workbench.action.quickTextSearch",
    "when": "vim.mode=='Normal' && editorTextFocus && !terminalFocus"
  },

  /* window split*/
  {
    "key": "space h",
    "command": "runCommands",
    "args": {
      "commands": [
        "workbench.action.splitEditorDown",
        "workbench.action.closeOtherEditors"
      ]
    },
    "when": "vim.mode == 'Normal' && editorTextFocus"
  },
  {
    "key": "space v",
    "command": "runCommands",
    "args": {
      "commands": [
        "workbench.action.splitEditor",
        "workbench.action.closeOtherEditors"
      ]
    },
    "when": "vim.mode == 'Normal' && editorTextFocus"
  },

  /* navigate windows */
  {
    "key": "ctrl+j",
    "command": "workbench.action.navigateDown",
    "when": "vim.mode == 'Normal'"
  },
  {
    "key": "ctrl+k",
    "command": "workbench.action.navigateUp",
    "when": "vim.mode == 'Normal'"
  },
  {
    "key": "ctrl+l",
    "command": "workbench.action.navigateRight",
    "when": "vim.mode == 'Normal'"
  },
  {
    "key": "ctrl+h",
    "command": "workbench.action.navigateLeft",
    "when": "vim.mode == 'Normal'"
  },

  /* resize window */
  {
    "key": "ctrl+up",
    "command": "workbench.action.increaseViewHeight",
    "when": "vim.mode == 'Normal'"
  },
  {
    "key": "ctrl+down",
    "command": "workbench.action.decreaseViewHeight",

    "when": "vim.mode == 'Normal'"
  },
  {
    "key": "ctrl+left",
    "command": "workbench.action.decreaseViewWidth",
    "when": "vim.mode == 'Normal'"
  },
  {
    "key": "ctrl+right",
    "command": "workbench.action.increaseViewWidth",
    "when": "vim.mode == 'Normal'"
  },

  /* moveline down and line up */
  {
    "key": "alt+j",
    "command": "editor.action.moveLinesDownAction",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "alt+down",
    "command": "-editor.action.moveLinesDownAction",
    "when": "!editorTextFocus && !editorReadonly"
  },
  {
    "key": "alt+k",
    "command": "editor.action.moveLinesUpAction",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "alt+up",
    "command": "-editor.action.moveLinesUpAction",
    "when": "editorTextFocus && !editorReadonly"
  },

  /* format */
  //comment use gcc to comment one line or use 2 gcc comment two line 3 gcc comment three line
  {
    "key": "space l f",
    "command": "prettier.forceFormatDocument",
    "when": "editorTextFocus && !editorReadonly && vim.mode=='Normal' "
  },

  /* buffer */
  {
    "key": "space b h",
    "command": "workbench.action.closeEditorsToTheLeft",
    "when": "editorTextFocus && vim.mode == 'Normal'"
  },
  {
    "key": "space b l",
    "command": "workbench.action.closeEditorsToTheRight",
    "when": "editorTextFocus && vim.mode == 'Normal'"
  },
  {
    "key": "space b o",
    "command": "workbench.action.closeOtherEditors",
    "when": "editorTextFocus && vim.mode == 'Normal'"
  },
  {
    "key": "[ b",
    "command": "workbench.action.previousEditor",
    "when": "editorTextFocus && vim.mode == 'Normal'"
  },
  {
    "key": "] b",
    "command": "workbench.action.nextEditor",
    "when": "editorTextFocus && vim.mode == 'Normal'"
  },

  /* suggestion */
  {
    "key": "ctrl+k",
    "command": "selectPrevSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
  },
  {
    "key": "ctrl+j",
    "command": "selectNextSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
  },

  /* terminal */
  {
    "key": "f7",
    "command": "workbench.action.terminal.toggleTerminal",
    "when": "terminal.active"
  },

  {
    "key": "f12",
    "command": "workbench.action.terminal.split",
    "when": "terminalFocus"
  },
  {
    "key": "alt+left",
    "command": "workbench.action.terminal.focusPreviousPane",
    "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
  },
  {
    "key": "alt+right",
    "command": "workbench.action.terminal.focusNextPane",
    "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
  },
  {
    "key": "alt+f12",
    "command": "workbench.action.terminal.kill",
    "when": "terminalFocus"
  },

  //file explorer settings operation on fileExplior use default vscode focus explorer ctrl+shift+e, and ctrl+shift+x focus extions
  //new file or folder: you can new file with name with it's extension name, or new folder by add '/' slash in the end of file name.
  {
    "key": "d",
    "command": "deleteFile",
    "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
  },
  {
    "key": "r",
    "command": "renameFile",
    "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
  },
  {
    "key": "a",
    "command": "explorer.newFile",
    "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
  },
  {
    "key": "x",
    "command": "filesExplorer.cut",
    "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
  },

  {
    "key": "y",
    "command": "filesExplorer.copy",
    "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !inputFocus"
  },
  {
    "key": "p",
    "command": "filesExplorer.paste",
    "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceReadonly && !inputFocus"
  },
  {
    "key": "ctrl+j",
    "command": "selectNextCodeAction",
    "when": "codeActionMenuVisible && !textInputFocus"
  },
  {
    "key": "ctrl+k",
    "command": "selectPrevCodeAction",
    "when": "codeActionMenuVisible && !textInputFocus"
  }
]
